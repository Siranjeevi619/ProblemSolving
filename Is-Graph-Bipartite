class Solution {
    static boolean dfs(int index , int v , int [][] graph , int [] visited){
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(index);
        visited[index] = 0;
        while(!queue.isEmpty()){
            int curr = queue.poll();
            for(int i : graph[curr]){
                if(visited[i] == -1){
                    visited[i] = 1 - visited[curr];
                    queue.offer(i);
                }
                else if(visited[i] == visited[curr]){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean isBipartite(int[][] graph) {
        int v = graph.length;
        int [] visited = new int[v];
        for(int i = 0 ; i < v ; i+=1){
            visited[i]  = -1;
        }
        for(int i = 0 ; i < v ; i+=1){
            if(visited[i] == -1){
               if(dfs(i, v, graph, visited) == false){
                   return false;
               }
            }
        }
        return true;
    }
}